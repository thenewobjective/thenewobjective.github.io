{"version":3,"file":"index.mjs","mappings":"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","sources":["webpack://@mlhaufe/tile-engine/./src/data/assets/maps/ sync ^\\.\\/.*\\.json$","webpack://@mlhaufe/tile-engine/./src/data/assets/sheets/ sync ^\\.\\/.*\\-.*\\.png$","webpack://@mlhaufe/tile-engine/webpack/bootstrap","webpack://@mlhaufe/tile-engine/webpack/runtime/hasOwnProperty shorthand","webpack://@mlhaufe/tile-engine/webpack/runtime/publicPath","webpack://@mlhaufe/tile-engine/./src/application/Control.mts","webpack://@mlhaufe/tile-engine/./src/application/usecases/LoadTileMap.mts","webpack://@mlhaufe/tile-engine/./src/domain/TileMap.mts","webpack://@mlhaufe/tile-engine/./src/domain/TileSheet.mts","webpack://@mlhaufe/tile-engine/./src/domain/Tile.mts","webpack://@mlhaufe/tile-engine/./src/data/TileSheetRepository.mts","webpack://@mlhaufe/tile-engine/./src/data/TileMapRepository.mts","webpack://@mlhaufe/tile-engine/./src/presentation/TileMap/TileMapPresenter.mts","webpack://@mlhaufe/tile-engine/./src/index.mts","webpack://@mlhaufe/tile-engine/./src/presentation/TileMap/TileMapControl.mts"],"sourcesContent":["var map = {\n\t\"./sample-1.json\": 249\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 576;","var map = {\n\t\"./default-70.png\": 272\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 614;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (typeof import.meta.url === \"string\") scriptUrl = import.meta.url\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Presenter } from \"./Presenter.mjs\";\r\nimport { UseCase } from \"./UseCase.mjs\";\r\nimport { Repository } from \"./Repository.mjs\";\r\n\r\nexport abstract class Control {\r\n    accessor presenter: Presenter<any> | undefined\r\n    accessor repository: Repository<any> | undefined\r\n    accessor useCase: UseCase<any, any> | undefined\r\n\r\n    abstract render(): void\r\n}\r\n","import { Command } from \"../UseCase.mjs\";\r\nimport { Presenter } from \"../Presenter.mjs\";\r\nimport { Repository } from \"../Repository.mjs\";\r\nimport { TileMap } from \"../../domain/TileMap.mjs\";\r\n\r\nexport class LoadTileMap implements Command<string> {\r\n    constructor(\r\n        readonly presenter: Presenter<TileMap>,\r\n        readonly repository: Repository<TileMap>\r\n    ) { }\r\n\r\n    async execute(id: string): Promise<void> {\r\n        const tileMap = await this.repository.get(id);\r\n        this.presenter.present(tileMap);\r\n    }\r\n}","import { Tile } from \"./Tile.mjs\";\r\nimport { TileSheet } from \"./TileSheet.mjs\";\r\n\r\nexport class TileMap {\r\n    constructor(\r\n        readonly id: string,\r\n        readonly width: number,\r\n        readonly height: number,\r\n        readonly tileSheet: TileSheet,\r\n        readonly tiles: Tile[][]\r\n    ) {\r\n        const ts = tiles.flat();\r\n        if (ts.length < 1)\r\n            throw new Error(\"TileMap must have at least one tile\");\r\n        if (ts.some(tile => !tileSheet.tiles.includes(tile)))\r\n            throw new Error(\"TileMap cannot contain tiles not in its tileSheet\");\r\n        if (ts.length !== width * height)\r\n            throw new Error(\"TileMap must have width * height tiles\");\r\n    }\r\n}","import { Tile } from \"./Tile.mjs\";\r\n\r\nexport class TileSheet {\r\n    constructor(\r\n        readonly id: string,\r\n        readonly tileSize: number,\r\n        readonly tiles: Tile[]\r\n    ) { }\r\n}","export class Tile {\r\n    constructor(\r\n        readonly id: number,\r\n        readonly size: number,\r\n        readonly image: ImageBitmap\r\n    ) { }\r\n}\r\n","import { TileSheet } from \"../domain/TileSheet.mjs\";\r\nimport { Repository } from \"../application/Repository.mjs\";\r\nimport { Tile } from \"../domain/Tile.mjs\";\r\n\r\nexport class TileSheetRepository implements Repository<TileSheet> {\r\n    accessor defaultTileSize: number = 70;\r\n\r\n    async #loadTiles(size: number, url: string) {\r\n        const response = await fetch(url),\r\n            blob = await response.blob(),\r\n            image = await createImageBitmap(blob),\r\n            { width, height } = image,\r\n            tiles = await Promise.all(\r\n                Array.from({ length: width / size * height / size }, async (_, i) => {\r\n                    const x = i % (width / size) * size,\r\n                        y = Math.floor(i / (width / size)) * size,\r\n                        img = await createImageBitmap(image, x, y, size, size);\r\n                    return new Tile(i, size, img)\r\n                })\r\n            )\r\n        image.close(); // No need to keep the image in memory after we've created the tiles\r\n        return tiles\r\n    }\r\n\r\n    async get(id: string) {\r\n        const size = this.defaultTileSize,\r\n            url = require(`./assets/sheets/${id}-${size}.png`),\r\n            tiles = await this.#loadTiles(size, url);\r\n        return new TileSheet(id, size, tiles)\r\n    }\r\n\r\n    async getBySize(id: string, size: number) {\r\n        const url = require(`./assets/sheets/${id}-${size}.png`),\r\n            tiles = await this.#loadTiles(size, url);\r\n        return new TileSheet(id, size, tiles)\r\n    }\r\n}","import { Repository } from \"../application/Repository.mjs\";\r\nimport { TileMap } from \"../domain/TileMap.mjs\";\r\nimport { TileSheetRepository } from \"./TileSheetRepository.mjs\";\r\n\r\ninterface TileMapDto {\r\n    id: string;\r\n    width: number;\r\n    height: number;\r\n    tileSheetId: string;\r\n    tileIds: number[][];\r\n}\r\n\r\nexport class TileMapRepository implements Repository<TileMap> {\r\n    #tileSheetRepository = new TileSheetRepository();\r\n    async get(id: string): Promise<TileMap> {\r\n        const json = require(`./assets/maps/${id}.json`) as TileMapDto,\r\n            { width, height, tileSheetId, tileIds } = json,\r\n            tileSheet = await this.#tileSheetRepository.get(tileSheetId),\r\n            tiles = tileIds.map(row => row.map(id => tileSheet.tiles[id])),\r\n            tileMap = new TileMap(id, width, height, tileSheet, tiles);\r\n\r\n        return tileMap;\r\n    }\r\n}","import { Presenter } from \"../../application/Presenter.mjs\";\r\nimport { TileMap } from \"../../domain/TileMap.mjs\";\r\n\r\nexport class TileMapPresenter implements Presenter<TileMap> {\r\n    constructor(public elContainer: HTMLElement) { }\r\n\r\n    present({ height, width, tiles }: TileMap): void {\r\n        const canvas = document.createElement(\"canvas\"),\r\n            ctx = canvas.getContext(\"2d\")!,\r\n            tileSize = tiles[0][0].size;\r\n\r\n        Object.assign(canvas, {\r\n            width: width * tileSize,\r\n            height: height * tileSize\r\n        });\r\n\r\n        tiles.forEach((row, y) =>\r\n            row.forEach(({ image }, x) =>\r\n                ctx.drawImage(image, x * tileSize, y * tileSize)\r\n            )\r\n        )\r\n\r\n        this.elContainer.appendChild(canvas);\r\n    }\r\n}","import { TileMapControl } from \"./presentation/TileMap/TileMapControl.mjs\";\r\n\r\nconst sampleMap = new TileMapControl('sample-1');\r\n\r\nsampleMap.render();","import { Control } from \"../../application/Control.mjs\";\r\nimport { LoadTileMap } from \"../../application/usecases/LoadTileMap.mjs\";\r\nimport { TileMapRepository } from \"../../data/TileMapRepository.mjs\";\r\nimport { TileMapPresenter } from \"./TileMapPresenter.mjs\";\r\n\r\nexport class TileMapControl extends Control {\r\n    override accessor presenter = new TileMapPresenter(document.body);\r\n    override accessor repository = new TileMapRepository();\r\n    override accessor useCase = new LoadTileMap(this.presenter, this.repository);\r\n\r\n    constructor(readonly mapId: string) { super() }\r\n\r\n    render() { this.useCase.execute(this.mapId); }\r\n}"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","__webpack_module_cache__","moduleId","cachedModule","undefined","__webpack_modules__","obj","prop","prototype","hasOwnProperty","call","scriptUrl","url","replace","p","Control","presenter","repository","useCase","LoadTileMap","constructor","execute","tileMap","this","get","present","TileMap","width","height","tileSheet","tiles","ts","flat","length","some","tile","includes","TileSheet","tileSize","Tile","size","image","TileSheetRepository","defaultTileSize","response","fetch","blob","createImageBitmap","Promise","all","Array","from","async","_","i","x","y","Math","floor","img","close","getBySize","TileMapRepository","json","tileSheetId","tileIds","row","TileMapPresenter","elContainer","canvas","document","createElement","ctx","getContext","assign","forEach","drawImage","appendChild","mapId","body","super","render"],"sourceRoot":""}